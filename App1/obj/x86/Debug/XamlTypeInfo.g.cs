//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[19];
            _typeNameTable[0] = "App1.MyUserControl.AddRemoveUserControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.Button";
            _typeNameTable[3] = "App1.MyUserControl.Base.BaseUserControl";
            _typeNameTable[4] = "App1.MyUserControl.ClientUserControl";
            _typeNameTable[5] = "App1.Model.Client";
            _typeNameTable[6] = "App1.Model.Base.EntityBase";
            _typeNameTable[7] = "Object";
            _typeNameTable[8] = "App1.MyUserControl.ProductListUserControl";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.ListView";
            _typeNameTable[10] = "System.Collections.ObjectModel.ObservableCollection`1<App1.Model.Product>";
            _typeNameTable[11] = "System.Collections.ObjectModel.Collection`1<App1.Model.Product>";
            _typeNameTable[12] = "App1.Model.Product";
            _typeNameTable[13] = "Int32";
            _typeNameTable[14] = "String";
            _typeNameTable[15] = "App1.MyUserControl.ProductUserControl";
            _typeNameTable[16] = "App1.View.ClientView";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[18] = "App1.ViewModel.ClientViewModel";

            _typeTable = new global::System.Type[19];
            _typeTable[0] = typeof(global::App1.MyUserControl.AddRemoveUserControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.Button);
            _typeTable[3] = typeof(global::App1.MyUserControl.Base.BaseUserControl);
            _typeTable[4] = typeof(global::App1.MyUserControl.ClientUserControl);
            _typeTable[5] = typeof(global::App1.Model.Client);
            _typeTable[6] = typeof(global::App1.Model.Base.EntityBase);
            _typeTable[7] = typeof(global::System.Object);
            _typeTable[8] = typeof(global::App1.MyUserControl.ProductListUserControl);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.ListView);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::App1.Model.Product>);
            _typeTable[11] = typeof(global::System.Collections.ObjectModel.Collection<global::App1.Model.Product>);
            _typeTable[12] = typeof(global::App1.Model.Product);
            _typeTable[13] = typeof(global::System.Int32);
            _typeTable[14] = typeof(global::System.String);
            _typeTable[15] = typeof(global::App1.MyUserControl.ProductUserControl);
            _typeTable[16] = typeof(global::App1.View.ClientView);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[18] = typeof(global::App1.ViewModel.ClientViewModel);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AddRemoveUserControl() { return new global::App1.MyUserControl.AddRemoveUserControl(); }
        private object Activate_3_BaseUserControl() { return new global::App1.MyUserControl.Base.BaseUserControl(); }
        private object Activate_4_ClientUserControl() { return new global::App1.MyUserControl.ClientUserControl(); }
        private object Activate_5_Client() { return new global::App1.Model.Client(); }
        private object Activate_6_EntityBase() { return new global::App1.Model.Base.EntityBase(); }
        private object Activate_8_ProductListUserControl() { return new global::App1.MyUserControl.ProductListUserControl(); }
        private object Activate_10_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::App1.Model.Product>(); }
        private object Activate_11_Collection() { return new global::System.Collections.ObjectModel.Collection<global::App1.Model.Product>(); }
        private object Activate_12_Product() { return new global::App1.Model.Product(); }
        private object Activate_15_ProductUserControl() { return new global::App1.MyUserControl.ProductUserControl(); }
        private object Activate_16_ClientView() { return new global::App1.View.ClientView(); }
        private void VectorAdd_10_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App1.Model.Product>)instance;
            var newItem = (global::App1.Model.Product)item;
            collection.Add(newItem);
        }
        private void VectorAdd_11_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App1.Model.Product>)instance;
            var newItem = (global::App1.Model.Product)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  App1.MyUserControl.AddRemoveUserControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_AddRemoveUserControl;
                userType.AddMemberName("AddBtn");
                userType.AddMemberName("RemoveBtn");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.Button
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  App1.MyUserControl.Base.BaseUserControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_BaseUserControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  App1.MyUserControl.ClientUserControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.MyUserControl.Base.BaseUserControl"));
                userType.Activator = Activate_4_ClientUserControl;
                userType.AddMemberName("Client");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  App1.Model.Client
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.Model.Base.EntityBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  App1.Model.Base.EntityBase
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_EntityBase;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Object
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  App1.MyUserControl.ProductListUserControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.MyUserControl.Base.BaseUserControl"));
                userType.Activator = Activate_8_ProductListUserControl;
                userType.AddMemberName("ItemsList");
                userType.AddMemberName("Obs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.Controls.ListView
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  System.Collections.ObjectModel.ObservableCollection`1<App1.Model.Product>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<App1.Model.Product>"));
                userType.CollectionAdd = VectorAdd_10_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.Collections.ObjectModel.Collection`1<App1.Model.Product>
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_Collection;
                userType.CollectionAdd = VectorAdd_11_Collection;
                xamlType = userType;
                break;

            case 12:   //  App1.Model.Product
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.Model.Base.EntityBase"));
                userType.Activator = Activate_12_Product;
                userType.AddMemberName("Id");
                userType.AddMemberName("Name");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Int32
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  String
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  App1.MyUserControl.ProductUserControl
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("App1.MyUserControl.Base.BaseUserControl"));
                userType.Activator = Activate_15_ProductUserControl;
                userType.AddMemberName("Product");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  App1.View.ClientView
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_ClientView;
                userType.AddMemberName("ClientUserControl");
                userType.AddMemberName("ProductListUserControlBuy");
                userType.AddMemberName("ProductListUserControlAvaiable");
                userType.AddMemberName("ProductUserControl");
                userType.AddMemberName("AddRemoveUserControl");
                userType.AddMemberName("ClientViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  App1.ViewModel.ClientViewModel
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_AddRemoveUserControl_AddBtn(object instance)
        {
            var that = (global::App1.MyUserControl.AddRemoveUserControl)instance;
            return that.AddBtn;
        }
        private void set_0_AddRemoveUserControl_AddBtn(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.AddRemoveUserControl)instance;
            that.AddBtn = (global::Windows.UI.Xaml.Controls.Button)Value;
        }
        private object get_1_AddRemoveUserControl_RemoveBtn(object instance)
        {
            var that = (global::App1.MyUserControl.AddRemoveUserControl)instance;
            return that.RemoveBtn;
        }
        private void set_1_AddRemoveUserControl_RemoveBtn(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.AddRemoveUserControl)instance;
            that.RemoveBtn = (global::Windows.UI.Xaml.Controls.Button)Value;
        }
        private object get_2_ClientUserControl_Client(object instance)
        {
            var that = (global::App1.MyUserControl.ClientUserControl)instance;
            return that.Client;
        }
        private void set_2_ClientUserControl_Client(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.ClientUserControl)instance;
            that.Client = (global::App1.Model.Client)Value;
        }
        private object get_3_ProductListUserControl_ItemsList(object instance)
        {
            var that = (global::App1.MyUserControl.ProductListUserControl)instance;
            return that.ItemsList;
        }
        private void set_3_ProductListUserControl_ItemsList(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.ProductListUserControl)instance;
            that.ItemsList = (global::Windows.UI.Xaml.Controls.ListView)Value;
        }
        private object get_4_ProductListUserControl_Obs(object instance)
        {
            var that = (global::App1.MyUserControl.ProductListUserControl)instance;
            return that.Obs;
        }
        private void set_4_ProductListUserControl_Obs(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.ProductListUserControl)instance;
            that.Obs = (global::System.Collections.ObjectModel.ObservableCollection<global::App1.Model.Product>)Value;
        }
        private object get_5_Product_Id(object instance)
        {
            var that = (global::App1.Model.Product)instance;
            return that.Id;
        }
        private void set_5_Product_Id(object instance, object Value)
        {
            var that = (global::App1.Model.Product)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_6_Product_Name(object instance)
        {
            var that = (global::App1.Model.Product)instance;
            return that.Name;
        }
        private void set_6_Product_Name(object instance, object Value)
        {
            var that = (global::App1.Model.Product)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_7_Product_Value(object instance)
        {
            var that = (global::App1.Model.Product)instance;
            return that.Value;
        }
        private void set_7_Product_Value(object instance, object Value)
        {
            var that = (global::App1.Model.Product)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_8_ProductUserControl_Product(object instance)
        {
            var that = (global::App1.MyUserControl.ProductUserControl)instance;
            return that.Product;
        }
        private void set_8_ProductUserControl_Product(object instance, object Value)
        {
            var that = (global::App1.MyUserControl.ProductUserControl)instance;
            that.Product = (global::App1.Model.Product)Value;
        }
        private object get_9_ClientView_ClientUserControl(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.ClientUserControl;
        }
        private void set_9_ClientView_ClientUserControl(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.ClientUserControl = (global::App1.MyUserControl.ClientUserControl)Value;
        }
        private object get_10_ClientView_ProductListUserControlBuy(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.ProductListUserControlBuy;
        }
        private void set_10_ClientView_ProductListUserControlBuy(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.ProductListUserControlBuy = (global::App1.MyUserControl.ProductListUserControl)Value;
        }
        private object get_11_ClientView_ProductListUserControlAvaiable(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.ProductListUserControlAvaiable;
        }
        private void set_11_ClientView_ProductListUserControlAvaiable(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.ProductListUserControlAvaiable = (global::App1.MyUserControl.ProductListUserControl)Value;
        }
        private object get_12_ClientView_ProductUserControl(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.ProductUserControl;
        }
        private void set_12_ClientView_ProductUserControl(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.ProductUserControl = (global::App1.MyUserControl.ProductUserControl)Value;
        }
        private object get_13_ClientView_AddRemoveUserControl(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.AddRemoveUserControl;
        }
        private void set_13_ClientView_AddRemoveUserControl(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.AddRemoveUserControl = (global::App1.MyUserControl.AddRemoveUserControl)Value;
        }
        private object get_14_ClientView_ClientViewModel(object instance)
        {
            var that = (global::App1.View.ClientView)instance;
            return that.ClientViewModel;
        }
        private void set_14_ClientView_ClientViewModel(object instance, object Value)
        {
            var that = (global::App1.View.ClientView)instance;
            that.ClientViewModel = (global::App1.ViewModel.ClientViewModel)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "App1.MyUserControl.AddRemoveUserControl.AddBtn":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.AddRemoveUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AddBtn", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_0_AddRemoveUserControl_AddBtn;
                xamlMember.Setter = set_0_AddRemoveUserControl_AddBtn;
                break;
            case "App1.MyUserControl.AddRemoveUserControl.RemoveBtn":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.AddRemoveUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "RemoveBtn", "Windows.UI.Xaml.Controls.Button");
                xamlMember.Getter = get_1_AddRemoveUserControl_RemoveBtn;
                xamlMember.Setter = set_1_AddRemoveUserControl_RemoveBtn;
                break;
            case "App1.MyUserControl.ClientUserControl.Client":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.ClientUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Client", "App1.Model.Client");
                xamlMember.Getter = get_2_ClientUserControl_Client;
                xamlMember.Setter = set_2_ClientUserControl_Client;
                break;
            case "App1.MyUserControl.ProductListUserControl.ItemsList":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.ProductListUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ItemsList", "Windows.UI.Xaml.Controls.ListView");
                xamlMember.Getter = get_3_ProductListUserControl_ItemsList;
                xamlMember.Setter = set_3_ProductListUserControl_ItemsList;
                break;
            case "App1.MyUserControl.ProductListUserControl.Obs":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.ProductListUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Obs", "System.Collections.ObjectModel.ObservableCollection`1<App1.Model.Product>");
                xamlMember.Getter = get_4_ProductListUserControl_Obs;
                xamlMember.Setter = set_4_ProductListUserControl_Obs;
                break;
            case "App1.Model.Product.Id":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Model.Product");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_5_Product_Id;
                xamlMember.Setter = set_5_Product_Id;
                break;
            case "App1.Model.Product.Name":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Model.Product");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_6_Product_Name;
                xamlMember.Setter = set_6_Product_Name;
                break;
            case "App1.Model.Product.Value":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.Model.Product");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.Getter = get_7_Product_Value;
                xamlMember.Setter = set_7_Product_Value;
                break;
            case "App1.MyUserControl.ProductUserControl.Product":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.MyUserControl.ProductUserControl");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "Product", "App1.Model.Product");
                xamlMember.Getter = get_8_ProductUserControl_Product;
                xamlMember.Setter = set_8_ProductUserControl_Product;
                break;
            case "App1.View.ClientView.ClientUserControl":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ClientUserControl", "App1.MyUserControl.ClientUserControl");
                xamlMember.Getter = get_9_ClientView_ClientUserControl;
                xamlMember.Setter = set_9_ClientView_ClientUserControl;
                break;
            case "App1.View.ClientView.ProductListUserControlBuy":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ProductListUserControlBuy", "App1.MyUserControl.ProductListUserControl");
                xamlMember.Getter = get_10_ClientView_ProductListUserControlBuy;
                xamlMember.Setter = set_10_ClientView_ProductListUserControlBuy;
                break;
            case "App1.View.ClientView.ProductListUserControlAvaiable":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ProductListUserControlAvaiable", "App1.MyUserControl.ProductListUserControl");
                xamlMember.Getter = get_11_ClientView_ProductListUserControlAvaiable;
                xamlMember.Setter = set_11_ClientView_ProductListUserControlAvaiable;
                break;
            case "App1.View.ClientView.ProductUserControl":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ProductUserControl", "App1.MyUserControl.ProductUserControl");
                xamlMember.Getter = get_12_ClientView_ProductUserControl;
                xamlMember.Setter = set_12_ClientView_ProductUserControl;
                break;
            case "App1.View.ClientView.AddRemoveUserControl":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "AddRemoveUserControl", "App1.MyUserControl.AddRemoveUserControl");
                xamlMember.Getter = get_13_ClientView_AddRemoveUserControl;
                xamlMember.Setter = set_13_ClientView_AddRemoveUserControl;
                break;
            case "App1.View.ClientView.ClientViewModel":
                userType = (global::App1.App1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App1.View.ClientView");
                xamlMember = new global::App1.App1_XamlTypeInfo.XamlMember(this, "ClientViewModel", "App1.ViewModel.ClientViewModel");
                xamlMember.Getter = get_14_ClientView_ClientViewModel;
                xamlMember.Setter = set_14_ClientView_ClientViewModel;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

