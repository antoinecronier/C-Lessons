@model WebApplicationMVCSecure.Models.User

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Raw("<div id='boxedAddressItem' class='rounded-table my-border my-border-radius'>")
                @if (Model != null && ((Model.Address != null && Model.Address.Id != 0) || Model.AddressId != 0))
                {
                    if (Model.AddressId == 0)
                    {
                        Model.AddressId = Model.Address.Id;
                    }

                    Html.RenderPartial("~/Views/Address/Widgets/BoxedAddressItem.cshtml", Model.Address);
                    Html.Raw("</div>");
                }
                else
                {
                    Html.Raw("</div>");
                    <input id="AddressId" type="hidden" name="AddressId" value="" />
                }
            </div>

            <button type="button" class="btn btn-default btn-block form-control" data-toggle="modal" data-target="#myModal">Edit Address</button>
            <!-- Modal -->
            <div class="modal fade" id="myModal" role="dialog">
                <div class="modal-dialog">

                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Address</h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-horizontal">
                                @*<input class="hidden" type="text" id="Id" name="Id" value=@Model.Address.Id />*@
                                @Html.HiddenFor(model => model.Address.Id)
                                @{Html.RenderPartial("~/Views/Address/Widgets/AddressInput.cshtml", Model.Address);}
                            </div><div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <button id="AddressValidation" type="button" class="btn btn-default" data-dismiss="modal">Edit</button>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @*<a class="btn btn-default btn-block form-control" href="@Url.Action("Create", "Address", new { Address = Model.Address })">Validate</a>*@
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-default" id="EditUsersToAddresses">Edit</button>
            </div>
        </div>
    </div>
}

<div class="row" id="address-list">
    <div class="col-md-6">
        <h2>User current addresses</h2>
        <ul id="addressListUser" class="connectedSortable rounded-table my-border my-border-radius">
            @{Html.RenderPartial("~/Views/Address/Widgets/BoxedAddressList.cshtml", (IEnumerable<WebApplicationMVCSecure.Models.Address>)ViewBag.AddressListUser);}
        </ul>
    </div>
    <div class="col-md-6">
        <h2>All addresses</h2>
        <ul id="addressListAll" class="connectedSortable rounded-table my-border my-border-radius">
            @{Html.RenderPartial("~/Views/Address/Widgets/BoxedAddressList.cshtml", (IEnumerable<WebApplicationMVCSecure.Models.Address>)ViewBag.AddressListAll);}
        </ul>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jquery-1.12.4")
@Scripts.Render("~/bundles/jquery-ui")
@Scripts.Render("~/bundles/address-item-update")
@Scripts.Render("~/bundles/address-item-list-drag-drop")
@Scripts.Render("~/bundles/edit-users-to-addresses")
